// demo application
// generated by Fast Light User Interface Designer (fluid) version 1.0308

#ifndef cruise_demo_h
#define cruise_demo_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Value_Output.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Light_Button.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Choice.H>

/**
 Adaptive cruise control user interface
*/
class CruiseControlUI {
public:
  CruiseControlUI();
private:
  Fl_Double_Window *mainWindow;
  Fl_Dial *vehicle_speed;
  inline void cb_vehicle_speed_i(Fl_Dial*, void*);
  static void cb_vehicle_speed(Fl_Dial*, void*);
  Fl_Value_Output *vehicle_speed_output;
  Fl_Value_Slider *distance;
  inline void cb_distance_i(Fl_Value_Slider*, void*);
  static void cb_distance(Fl_Value_Slider*, void*);
  Fl_Light_Button *enable;
  inline void cb_enable_i(Fl_Light_Button*, void*);
  static void cb_enable(Fl_Light_Button*, void*);
  inline void cb_Set_i(Fl_Light_Button*, void*);
  static void cb_Set(Fl_Light_Button*, void*);
  inline void cb_Resume_i(Fl_Light_Button*, void*);
  static void cb_Resume(Fl_Light_Button*, void*);
  inline void cb_Brake_i(Fl_Light_Button*, void*);
  static void cb_Brake(Fl_Light_Button*, void*);
  Fl_Dial *engine_speed;
  Fl_Value_Output *engine_speed_output;
  Fl_Check_Button *cc_status;
  inline void cb_cc_status_i(Fl_Check_Button*, void*);
  static void cb_cc_status(Fl_Check_Button*, void*);
  inline void cb_Accelerator_i(Fl_Slider*, void*);
  static void cb_Accelerator(Fl_Slider*, void*);
  Fl_Value_Output *accelerator_pedal;
  Fl_Value_Output *speed_setting_;
  Fl_Choice *state;
  static Fl_Menu_Item menu_state[];
  Fl_Value_Output *distance_setting_;
  inline void cb_Decrease_i(Fl_Light_Button*, void*);
  static void cb_Decrease(Fl_Light_Button*, void*);
  inline void cb_Increase_i(Fl_Light_Button*, void*);
  static void cb_Increase(Fl_Light_Button*, void*);
public:
  void show(int argc, char** argv);
  void set_engine_speed(int rpm);
  void set_cruise_control(int status);
  void update();
private:
  int engine_speed_cmd();
  void init_io();
};
#endif
