// demo application
// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "cruise_demo.h"
#include "cruise_io.h"
#define MAX_ERPM  2500
#define LOW_IDLE_ERPM  1000

void CruiseControlUI::cb_vehicle_speed_i(Fl_Dial* o, void*) {
  vehicle_speed_output->value((o->value()));
actual_kph = o->value();
}
void CruiseControlUI::cb_vehicle_speed(Fl_Dial* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_vehicle_speed_i(o,v);
}

void CruiseControlUI::cb_distance_i(Fl_Value_Slider* o, void*) {
  actual_distance = o->value();
}
void CruiseControlUI::cb_distance(Fl_Value_Slider* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_distance_i(o,v);
}

void CruiseControlUI::cb_enable_i(Fl_Light_Button* o, void*) {
  enable_button = o->value();
}
void CruiseControlUI::cb_enable(Fl_Light_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_enable_i(o,v);
}

void CruiseControlUI::cb_Set_i(Fl_Light_Button* o, void*) {
  set_decrease_button = o->value();
}
void CruiseControlUI::cb_Set(Fl_Light_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_Set_i(o,v);
}

void CruiseControlUI::cb_Resume_i(Fl_Light_Button* o, void*) {
  resume_increase_button = o->value();
}
void CruiseControlUI::cb_Resume(Fl_Light_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_Resume_i(o,v);
}

void CruiseControlUI::cb_Brake_i(Fl_Light_Button* o, void*) {
  brake_button = o->value();
}
void CruiseControlUI::cb_Brake(Fl_Light_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_Brake_i(o,v);
}

void CruiseControlUI::cb_cc_status_i(Fl_Check_Button* o, void*) {
  if (o->value()) o->value(0);
else o->value(1);
}
void CruiseControlUI::cb_cc_status(Fl_Check_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_cc_status_i(o,v);
}

void CruiseControlUI::cb_Accelerator_i(Fl_Slider* o, void*) {
  accelerator_pedal->value(o->value());
accelerator = o->value();
}
void CruiseControlUI::cb_Accelerator(Fl_Slider* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_Accelerator_i(o,v);
}

Fl_Menu_Item CruiseControlUI::menu_state[] = {
 {"Idle", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Enabled", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Init_Speed", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"steady", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"increasing_dist", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"decreasing_dist", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"increasing_speed", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"reducing_speed", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"resume_ready", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"resume_speed", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"no_resume", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void CruiseControlUI::cb_Decrease_i(Fl_Light_Button* o, void*) {
  decrease_distance_button = o->value();
}
void CruiseControlUI::cb_Decrease(Fl_Light_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_Decrease_i(o,v);
}

void CruiseControlUI::cb_Increase_i(Fl_Light_Button* o, void*) {
  increase_distance_button = o->value();
}
void CruiseControlUI::cb_Increase(Fl_Light_Button* o, void* v) {
  ((CruiseControlUI*)(o->parent()->user_data()))->cb_Increase_i(o,v);
}

/**
 constructor
*/
CruiseControlUI::CruiseControlUI() {
  { mainWindow = new Fl_Double_Window(617, 509, "Adaptive Cruise Control Demo");
    mainWindow->user_data((void*)(this));
    { vehicle_speed = new Fl_Dial(35, 25, 135, 135, "kph");
      vehicle_speed->type(1);
      vehicle_speed->maximum(200);
      vehicle_speed->step(1);
      vehicle_speed->callback((Fl_Callback*)cb_vehicle_speed);
      vehicle_speed->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Dial* vehicle_speed
    { vehicle_speed_output = new Fl_Value_Output(75, 166, 55, 24, "Speed Sensor (kph)");
      vehicle_speed_output->color((Fl_Color)10);
      vehicle_speed_output->maximum(200);
      vehicle_speed_output->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Output* vehicle_speed_output
    { distance = new Fl_Value_Slider(200, 35, 220, 25, "Distance (m)");
      distance->type(1);
      distance->color((Fl_Color)10);
      distance->maximum(100);
      distance->step(1);
      distance->value(25);
      distance->textsize(14);
      distance->callback((Fl_Callback*)cb_distance);
    } // Fl_Value_Slider* distance
    { enable = new Fl_Light_Button(30, 245, 70, 25, "Enable");
      enable->callback((Fl_Callback*)cb_enable);
    } // Fl_Light_Button* enable
    { Fl_Light_Button* o = new Fl_Light_Button(105, 245, 130, 25, "Set/Decrease");
      o->selection_color((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Set);
    } // Fl_Light_Button* o
    { Fl_Light_Button* o = new Fl_Light_Button(105, 275, 130, 25, "Resume/Increase");
      o->selection_color((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Resume);
    } // Fl_Light_Button* o
    { Fl_Light_Button* o = new Fl_Light_Button(25, 465, 100, 25, "Brake Pedal");
      o->callback((Fl_Callback*)cb_Brake);
    } // Fl_Light_Button* o
    { // Output parameter
      engine_speed = new Fl_Dial(450, 25, 135, 135, "RPM");
      engine_speed->type(1);
      engine_speed->color(FL_SELECTION_COLOR);
      engine_speed->maximum(4500);
      engine_speed->step(1);
      engine_speed->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
    } // Fl_Dial* engine_speed
    { engine_speed_output = new Fl_Value_Output(490, 166, 55, 24, "Speed Sensor (rpm)");
      engine_speed_output->color(FL_SELECTION_COLOR);
      engine_speed_output->maximum(4500);
      engine_speed_output->step(1);
    } // Fl_Value_Output* engine_speed_output
    { // Status setting disabled in GUI
      cc_status = new Fl_Check_Button(520, 205, 25, 25, "Cruise Control Status");
      cc_status->down_box(FL_DOWN_BOX);
      cc_status->color((Fl_Color)3);
      cc_status->callback((Fl_Callback*)cb_cc_status);
      cc_status->align(Fl_Align(FL_ALIGN_LEFT));
      cc_status->when(FL_WHEN_CHANGED);
    } // Fl_Check_Button* cc_status
    { Fl_Slider* o = new Fl_Slider(265, 245, 25, 225, "Accelerator");
      o->type(4);
      o->selection_color((Fl_Color)1);
      o->maximum(100);
      o->step(1);
      o->callback((Fl_Callback*)cb_Accelerator);
    } // Fl_Slider* o
    { accelerator_pedal = new Fl_Value_Output(300, 356, 40, 24, "Percent (%)");
      accelerator_pedal->color((Fl_Color)10);
      accelerator_pedal->maximum(200);
      accelerator_pedal->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Value_Output* accelerator_pedal
    { speed_setting_ = new Fl_Value_Output(180, 306, 55, 24, "Speed Setting (kph)");
      speed_setting_->color((Fl_Color)10);
      speed_setting_->maximum(200);
    } // Fl_Value_Output* speed_setting_
    { // Shows state of FSM
      state = new Fl_Choice(470, 245, 125, 25, "Internal State");
      state->down_box(FL_BORDER_BOX);
      state->menu(menu_state);
    } // Fl_Choice* state
    { distance_setting_ = new Fl_Value_Output(180, 411, 55, 24, "Distance Setting (m)");
      distance_setting_->color((Fl_Color)10);
      distance_setting_->maximum(200);
      distance_setting_->value(25);
    } // Fl_Value_Output* distance_setting_
    { Fl_Light_Button* o = new Fl_Light_Button(105, 350, 130, 25, "Decrease");
      o->tooltip("Reduce following distance");
      o->selection_color((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Decrease);
    } // Fl_Light_Button* o
    { Fl_Light_Button* o = new Fl_Light_Button(105, 380, 130, 25, "Increase");
      o->tooltip("Increase following distance");
      o->selection_color((Fl_Color)4);
      o->callback((Fl_Callback*)cb_Increase);
    } // Fl_Light_Button* o
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
}

/**
 display user interface
*/
void CruiseControlUI::show(int argc, char** argv) {
  mainWindow->show(argc, argv);
  init_io();
}

/**
 Set output engine speed command.
*/
void CruiseControlUI::set_engine_speed(int rpm) {
  // Set output widget values
  engine_speed->value(rpm);
  engine_speed_output->value(rpm);
}

/**
 Set output cruise control status
*/
void CruiseControlUI::set_cruise_control(int status) {
  cc_status->value(status);
}

/**
 results of state machine
*/
void CruiseControlUI::update() {
  state->value(internal_state);
  speed_setting_->value(speed_setting);
  cc_status->value(cruise_status);
  distance_setting_->value(distance_setting);
  engine_speed->value(engine_speed_cmd());
  engine_speed_output->value(engine_speed_cmd());
}

/**
 Calculate engine speed command
*/
int CruiseControlUI::engine_speed_cmd() {
  // Choose accelerator (cruise vs. manual)
  int percent = accelerator_pedal->value();
  if (cc_status->value() && cruise_accelerator > percent)
  {
  percent = cruise_accelerator;    
  }
  
  return (percent * (MAX_ERPM - LOW_IDLE_ERPM)/100) + LOW_IDLE_ERPM;
}

void CruiseControlUI::init_io() {
  actual_distance = distance->value();
  actual_kph = vehicle_speed->value();
}
